export interface AstSymbol<TType = any> {
    identifier: string;
    type?: TType;
    parent?: AstSymbol<TType>;
}
export interface SymbolLookupMethod<TSymbol extends AstSymbol = AstSymbol> {
    (key: string | TSymbol, type?: any, parent?: TSymbol | undefined): TSymbol[] | undefined;
}
export declare class SymbolTable<TSymbol extends AstSymbol = AstSymbol> {
    symbols: Map<string, TSymbol[]>;
    keyFunc: (s: TSymbol) => string;
    parent?: SymbolTable<TSymbol>;
    allowDuplicates: boolean;
    private _globalSymbols;
    constructor(symbolKeyProvider?: (s: TSymbol) => string);
    enterScope(): void;
    exitScope(): void;
    localLookup: SymbolLookupMethod<TSymbol>;
    lookup: SymbolLookupMethod<TSymbol>;
    add(key: string | TSymbol, value?: TSymbol): void;
    addToGlobalScope(key: string | TSymbol, value?: TSymbol): void;
    [Symbol.iterator](): IterableIterator<TSymbol>;
    private getKey(key);
    private lookupInternal(map, key, type?, parent?);
    private addSymbol(key, value, map);
}
